eval 
task
evalite
braintrust




eval()
logger()

tracing api
- span
dataset api

prompt generate/dataset
 - flavor: chat, completion



app()



action({
  memory: memory
})


memory()



const github = knowledge({
  id:
})



// Document types
const document = (options: DocumentOptions) => ({
  type: 'document',
  format: 'pdf' | 'docx' | 'txt' | 'md',
  parser: options.parser,
  extractors: ['text', 'tables', 'images']
})

// Structured data
const json = (options: JsonOptions) => ({
  type: 'json',
  schema: JsonSchema,
  indexing: ['key', 'value', 'path'],
  validation: boolean
})

// File system
const files = (options: FilesOptions) => ({
  type: 'files',
  watch: boolean,
  patterns: string[],
  ignore: string[]
})

// APIs/Streams
const stream = (options: StreamOptions) => ({
  type: 'stream',
  source: 'websocket' | 'webhook' | 'kafka',
  format: 'json' | 'protobuf' | 'avro',
  buffer: number
})

// SQL/Database
const sql = (options: SqlOptions) => ({
  type: 'sql',
  schema: DatabaseSchema,
  tables: string[],
  relationships: Relationship[]
})

// Key-Value
const kv = (options: KVOptions) => ({
  type: 'kv',
  ttl: number,
  encoding: 'json' | 'binary' | 'string'
})

// Time series
const timeseries = (options: TimeSeriesOptions) => ({
  type: 'timeseries',
  resolution: '1m' | '1h' | '1d',
  retention: string,
  aggregations: ['sum', 'avg', 'max']
})

// Semantic Search specific
const semantic = (options: SemanticOptions) => ({
  type: 'semantic',
  model: 'openai' | 'cohere' | 'local',
  dimensions: number,
  metric: 'cosine' | 'euclidean'
})




GitHub Knowledge Base:

typescriptCopy// Store repository, issues, PRs, and code relationships
const githubKnowledge = knowledge({
  id: 'github-anthropic',
  type: graph({
    schema: {
      nodes: ['repository', 'issue', 'pr', 'commit', 'user'],
      relationships: ['authored', 'depends_on', 'references']
    },
    embedder: 'code-embeddings'
  })
})

// Usage examples
await githubKnowledge.addRepository('anthropic/claude')
await githubKnowledge.query({
  // Find all PRs that reference an issue
  pattern: 'PR -[references]-> Issue',
  filter: { status: 'open' }
})

Memecoin Market Analysis:

typescriptCopy// Track social sentiment, price movements, and wallet activities
const memecoinKnowledge = knowledge({
  id: 'doge-pepe-analysis',
  type: vector({
    dimensions: 1536,
    sources: ['twitter', 'reddit', 'chain'],
    timeWindow: '24h',
    updateFrequency: '5m'
  })
})

// Usage examples
await memecoinKnowledge.ingest({
  social: twitterStream,
  price: binanceStream,
  wallets: ethereumStream
})

await memecoinKnowledge.analyze({
  query: 'sentiment correlation with whale movements',
  timeframe: 'last 6h'
})

ArXiv Research Assistant:

typescriptCopy// Academic paper analysis with citations and relationships
const arxivKnowledge = knowledge({
  id: 'ai-papers',
  type: rag({
    chunker: {
      strategy: 'semantic',
      size: 512,
      overlap: 50
    },
    embedder: 'all-mpnet-base-v2',
    metadata: ['authors', 'citations', 'categories']
  })
})

// Usage examples
await arxivKnowledge.ingest({
  papers: ['2402.17550', '2401.00123'],
  extractCitations: true
})

await arxivKnowledge.query({
  type: 'similar_research',
  paper: '2402.17550',
  filter: {
    date: 'last 3 months',
    category: 'cs.AI'
  }
})


// Example Usage:
const technicalDocs = knowledge({
  id: 'tech-docs',
  type: document({
    format: 'pdf',
    extractors: ['text', 'tables']
  })
})

const configStore = knowledge({
  id: 'configs',
  type: json({
    schema: ConfigSchema,
    indexing: ['path'],
    validation: true
  })
})

const metrics = knowledge({
  id: 'app-metrics',
  type: timeseries({
    resolution: '1m',
    retention: '30d',
    aggregations: ['avg']
  })
})

// Episodic memory stored in a vector database
const episodicMemory = knowledge({
  id: 'memories',
  type: episode({
    temporal: true,
    context: ['location', 'people']
  }),
  storage: vector({
    dimensions: 1536
  })
})

// Domain knowledge in a graph database
const domainKnowledge = knowledge({
  id: 'physics-domain',
  type: domain({
    taxonomy: ['mechanics', 'thermodynamics'],
    rules: [...]
  }),
  storage: graph({
    schema: {...}
  })